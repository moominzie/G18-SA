// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/moominzie/user-record/ent/employee"
	"github.com/moominzie/user-record/ent/part"
	"github.com/moominzie/user-record/ent/partorder"
	"github.com/moominzie/user-record/ent/predicate"
	"github.com/moominzie/user-record/ent/repairinvoice"
)

// PartorderUpdate is the builder for updating Partorder entities.
type PartorderUpdate struct {
	config
	hooks      []Hook
	mutation   *PartorderMutation
	predicates []predicate.Partorder
}

// Where adds a new predicate for the builder.
func (pu *PartorderUpdate) Where(ps ...predicate.Partorder) *PartorderUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetRepairinvoiceID sets the repairinvoice edge to RepairInvoice by id.
func (pu *PartorderUpdate) SetRepairinvoiceID(id int) *PartorderUpdate {
	pu.mutation.SetRepairinvoiceID(id)
	return pu
}

// SetNillableRepairinvoiceID sets the repairinvoice edge to RepairInvoice by id if the given value is not nil.
func (pu *PartorderUpdate) SetNillableRepairinvoiceID(id *int) *PartorderUpdate {
	if id != nil {
		pu = pu.SetRepairinvoiceID(*id)
	}
	return pu
}

// SetRepairinvoice sets the repairinvoice edge to RepairInvoice.
func (pu *PartorderUpdate) SetRepairinvoice(r *RepairInvoice) *PartorderUpdate {
	return pu.SetRepairinvoiceID(r.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (pu *PartorderUpdate) SetEmployeeID(id int) *PartorderUpdate {
	pu.mutation.SetEmployeeID(id)
	return pu
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (pu *PartorderUpdate) SetNillableEmployeeID(id *int) *PartorderUpdate {
	if id != nil {
		pu = pu.SetEmployeeID(*id)
	}
	return pu
}

// SetEmployee sets the employee edge to Employee.
func (pu *PartorderUpdate) SetEmployee(e *Employee) *PartorderUpdate {
	return pu.SetEmployeeID(e.ID)
}

// SetPartID sets the part edge to Part by id.
func (pu *PartorderUpdate) SetPartID(id int) *PartorderUpdate {
	pu.mutation.SetPartID(id)
	return pu
}

// SetNillablePartID sets the part edge to Part by id if the given value is not nil.
func (pu *PartorderUpdate) SetNillablePartID(id *int) *PartorderUpdate {
	if id != nil {
		pu = pu.SetPartID(*id)
	}
	return pu
}

// SetPart sets the part edge to Part.
func (pu *PartorderUpdate) SetPart(p *Part) *PartorderUpdate {
	return pu.SetPartID(p.ID)
}

// Mutation returns the PartorderMutation object of the builder.
func (pu *PartorderUpdate) Mutation() *PartorderMutation {
	return pu.mutation
}

// ClearRepairinvoice clears the repairinvoice edge to RepairInvoice.
func (pu *PartorderUpdate) ClearRepairinvoice() *PartorderUpdate {
	pu.mutation.ClearRepairinvoice()
	return pu
}

// ClearEmployee clears the employee edge to Employee.
func (pu *PartorderUpdate) ClearEmployee() *PartorderUpdate {
	pu.mutation.ClearEmployee()
	return pu
}

// ClearPart clears the part edge to Part.
func (pu *PartorderUpdate) ClearPart() *PartorderUpdate {
	pu.mutation.ClearPart()
	return pu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PartorderUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartorderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PartorderUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PartorderUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PartorderUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PartorderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   partorder.Table,
			Columns: partorder.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: partorder.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pu.mutation.RepairinvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   partorder.RepairinvoiceTable,
			Columns: []string{partorder.RepairinvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repairinvoice.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RepairinvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   partorder.RepairinvoiceTable,
			Columns: []string{partorder.RepairinvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repairinvoice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partorder.EmployeeTable,
			Columns: []string{partorder.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partorder.EmployeeTable,
			Columns: []string{partorder.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partorder.PartTable,
			Columns: []string{partorder.PartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: part.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partorder.PartTable,
			Columns: []string{partorder.PartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: part.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partorder.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PartorderUpdateOne is the builder for updating a single Partorder entity.
type PartorderUpdateOne struct {
	config
	hooks    []Hook
	mutation *PartorderMutation
}

// SetRepairinvoiceID sets the repairinvoice edge to RepairInvoice by id.
func (puo *PartorderUpdateOne) SetRepairinvoiceID(id int) *PartorderUpdateOne {
	puo.mutation.SetRepairinvoiceID(id)
	return puo
}

// SetNillableRepairinvoiceID sets the repairinvoice edge to RepairInvoice by id if the given value is not nil.
func (puo *PartorderUpdateOne) SetNillableRepairinvoiceID(id *int) *PartorderUpdateOne {
	if id != nil {
		puo = puo.SetRepairinvoiceID(*id)
	}
	return puo
}

// SetRepairinvoice sets the repairinvoice edge to RepairInvoice.
func (puo *PartorderUpdateOne) SetRepairinvoice(r *RepairInvoice) *PartorderUpdateOne {
	return puo.SetRepairinvoiceID(r.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (puo *PartorderUpdateOne) SetEmployeeID(id int) *PartorderUpdateOne {
	puo.mutation.SetEmployeeID(id)
	return puo
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (puo *PartorderUpdateOne) SetNillableEmployeeID(id *int) *PartorderUpdateOne {
	if id != nil {
		puo = puo.SetEmployeeID(*id)
	}
	return puo
}

// SetEmployee sets the employee edge to Employee.
func (puo *PartorderUpdateOne) SetEmployee(e *Employee) *PartorderUpdateOne {
	return puo.SetEmployeeID(e.ID)
}

// SetPartID sets the part edge to Part by id.
func (puo *PartorderUpdateOne) SetPartID(id int) *PartorderUpdateOne {
	puo.mutation.SetPartID(id)
	return puo
}

// SetNillablePartID sets the part edge to Part by id if the given value is not nil.
func (puo *PartorderUpdateOne) SetNillablePartID(id *int) *PartorderUpdateOne {
	if id != nil {
		puo = puo.SetPartID(*id)
	}
	return puo
}

// SetPart sets the part edge to Part.
func (puo *PartorderUpdateOne) SetPart(p *Part) *PartorderUpdateOne {
	return puo.SetPartID(p.ID)
}

// Mutation returns the PartorderMutation object of the builder.
func (puo *PartorderUpdateOne) Mutation() *PartorderMutation {
	return puo.mutation
}

// ClearRepairinvoice clears the repairinvoice edge to RepairInvoice.
func (puo *PartorderUpdateOne) ClearRepairinvoice() *PartorderUpdateOne {
	puo.mutation.ClearRepairinvoice()
	return puo
}

// ClearEmployee clears the employee edge to Employee.
func (puo *PartorderUpdateOne) ClearEmployee() *PartorderUpdateOne {
	puo.mutation.ClearEmployee()
	return puo
}

// ClearPart clears the part edge to Part.
func (puo *PartorderUpdateOne) ClearPart() *PartorderUpdateOne {
	puo.mutation.ClearPart()
	return puo
}

// Save executes the query and returns the updated entity.
func (puo *PartorderUpdateOne) Save(ctx context.Context) (*Partorder, error) {

	var (
		err  error
		node *Partorder
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartorderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PartorderUpdateOne) SaveX(ctx context.Context) *Partorder {
	pa, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pa
}

// Exec executes the query on the entity.
func (puo *PartorderUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PartorderUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PartorderUpdateOne) sqlSave(ctx context.Context) (pa *Partorder, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   partorder.Table,
			Columns: partorder.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: partorder.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Partorder.ID for update")}
	}
	_spec.Node.ID.Value = id
	if puo.mutation.RepairinvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   partorder.RepairinvoiceTable,
			Columns: []string{partorder.RepairinvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repairinvoice.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RepairinvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   partorder.RepairinvoiceTable,
			Columns: []string{partorder.RepairinvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repairinvoice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partorder.EmployeeTable,
			Columns: []string{partorder.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partorder.EmployeeTable,
			Columns: []string{partorder.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partorder.PartTable,
			Columns: []string{partorder.PartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: part.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partorder.PartTable,
			Columns: []string{partorder.PartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: part.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pa = &Partorder{config: puo.config}
	_spec.Assign = pa.assignValues
	_spec.ScanValues = pa.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partorder.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pa, nil
}
