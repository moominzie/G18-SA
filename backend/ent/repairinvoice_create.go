// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/moominzie/user-record/ent/bill"
	"github.com/moominzie/user-record/ent/device"
	"github.com/moominzie/user-record/ent/partorder"
	"github.com/moominzie/user-record/ent/repairinvoice"
	"github.com/moominzie/user-record/ent/returninvoice"
	"github.com/moominzie/user-record/ent/statusr"
	"github.com/moominzie/user-record/ent/symptom"
	"github.com/moominzie/user-record/ent/user"
)

// RepairInvoiceCreate is the builder for creating a RepairInvoice entity.
type RepairInvoiceCreate struct {
	config
	mutation *RepairInvoiceMutation
	hooks    []Hook
}

// SetRename sets the Rename field.
func (ric *RepairInvoiceCreate) SetRename(s string) *RepairInvoiceCreate {
	ric.mutation.SetRename(s)
	return ric
}

// SetDeviceID sets the device edge to Device by id.
func (ric *RepairInvoiceCreate) SetDeviceID(id int) *RepairInvoiceCreate {
	ric.mutation.SetDeviceID(id)
	return ric
}

// SetNillableDeviceID sets the device edge to Device by id if the given value is not nil.
func (ric *RepairInvoiceCreate) SetNillableDeviceID(id *int) *RepairInvoiceCreate {
	if id != nil {
		ric = ric.SetDeviceID(*id)
	}
	return ric
}

// SetDevice sets the device edge to Device.
func (ric *RepairInvoiceCreate) SetDevice(d *Device) *RepairInvoiceCreate {
	return ric.SetDeviceID(d.ID)
}

// SetStatusID sets the status edge to StatusR by id.
func (ric *RepairInvoiceCreate) SetStatusID(id int) *RepairInvoiceCreate {
	ric.mutation.SetStatusID(id)
	return ric
}

// SetNillableStatusID sets the status edge to StatusR by id if the given value is not nil.
func (ric *RepairInvoiceCreate) SetNillableStatusID(id *int) *RepairInvoiceCreate {
	if id != nil {
		ric = ric.SetStatusID(*id)
	}
	return ric
}

// SetStatus sets the status edge to StatusR.
func (ric *RepairInvoiceCreate) SetStatus(s *StatusR) *RepairInvoiceCreate {
	return ric.SetStatusID(s.ID)
}

// SetSymptomID sets the symptom edge to Symptom by id.
func (ric *RepairInvoiceCreate) SetSymptomID(id int) *RepairInvoiceCreate {
	ric.mutation.SetSymptomID(id)
	return ric
}

// SetNillableSymptomID sets the symptom edge to Symptom by id if the given value is not nil.
func (ric *RepairInvoiceCreate) SetNillableSymptomID(id *int) *RepairInvoiceCreate {
	if id != nil {
		ric = ric.SetSymptomID(*id)
	}
	return ric
}

// SetSymptom sets the symptom edge to Symptom.
func (ric *RepairInvoiceCreate) SetSymptom(s *Symptom) *RepairInvoiceCreate {
	return ric.SetSymptomID(s.ID)
}

// SetUserID sets the user edge to User by id.
func (ric *RepairInvoiceCreate) SetUserID(id int) *RepairInvoiceCreate {
	ric.mutation.SetUserID(id)
	return ric
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (ric *RepairInvoiceCreate) SetNillableUserID(id *int) *RepairInvoiceCreate {
	if id != nil {
		ric = ric.SetUserID(*id)
	}
	return ric
}

// SetUser sets the user edge to User.
func (ric *RepairInvoiceCreate) SetUser(u *User) *RepairInvoiceCreate {
	return ric.SetUserID(u.ID)
}

// SetReturninvoiceID sets the returninvoice edge to Returninvoice by id.
func (ric *RepairInvoiceCreate) SetReturninvoiceID(id int) *RepairInvoiceCreate {
	ric.mutation.SetReturninvoiceID(id)
	return ric
}

// SetNillableReturninvoiceID sets the returninvoice edge to Returninvoice by id if the given value is not nil.
func (ric *RepairInvoiceCreate) SetNillableReturninvoiceID(id *int) *RepairInvoiceCreate {
	if id != nil {
		ric = ric.SetReturninvoiceID(*id)
	}
	return ric
}

// SetReturninvoice sets the returninvoice edge to Returninvoice.
func (ric *RepairInvoiceCreate) SetReturninvoice(r *Returninvoice) *RepairInvoiceCreate {
	return ric.SetReturninvoiceID(r.ID)
}

// SetBillID sets the bill edge to Bill by id.
func (ric *RepairInvoiceCreate) SetBillID(id int) *RepairInvoiceCreate {
	ric.mutation.SetBillID(id)
	return ric
}

// SetNillableBillID sets the bill edge to Bill by id if the given value is not nil.
func (ric *RepairInvoiceCreate) SetNillableBillID(id *int) *RepairInvoiceCreate {
	if id != nil {
		ric = ric.SetBillID(*id)
	}
	return ric
}

// SetBill sets the bill edge to Bill.
func (ric *RepairInvoiceCreate) SetBill(b *Bill) *RepairInvoiceCreate {
	return ric.SetBillID(b.ID)
}

// SetPartInformationsID sets the part_informations edge to Partorder by id.
func (ric *RepairInvoiceCreate) SetPartInformationsID(id int) *RepairInvoiceCreate {
	ric.mutation.SetPartInformationsID(id)
	return ric
}

// SetNillablePartInformationsID sets the part_informations edge to Partorder by id if the given value is not nil.
func (ric *RepairInvoiceCreate) SetNillablePartInformationsID(id *int) *RepairInvoiceCreate {
	if id != nil {
		ric = ric.SetPartInformationsID(*id)
	}
	return ric
}

// SetPartInformations sets the part_informations edge to Partorder.
func (ric *RepairInvoiceCreate) SetPartInformations(p *Partorder) *RepairInvoiceCreate {
	return ric.SetPartInformationsID(p.ID)
}

// Mutation returns the RepairInvoiceMutation object of the builder.
func (ric *RepairInvoiceCreate) Mutation() *RepairInvoiceMutation {
	return ric.mutation
}

// Save creates the RepairInvoice in the database.
func (ric *RepairInvoiceCreate) Save(ctx context.Context) (*RepairInvoice, error) {
	if _, ok := ric.mutation.Rename(); !ok {
		return nil, &ValidationError{Name: "Rename", err: errors.New("ent: missing required field \"Rename\"")}
	}
	var (
		err  error
		node *RepairInvoice
	)
	if len(ric.hooks) == 0 {
		node, err = ric.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RepairInvoiceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ric.mutation = mutation
			node, err = ric.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ric.hooks) - 1; i >= 0; i-- {
			mut = ric.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ric.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ric *RepairInvoiceCreate) SaveX(ctx context.Context) *RepairInvoice {
	v, err := ric.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ric *RepairInvoiceCreate) sqlSave(ctx context.Context) (*RepairInvoice, error) {
	ri, _spec := ric.createSpec()
	if err := sqlgraph.CreateNode(ctx, ric.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	ri.ID = int(id)
	return ri, nil
}

func (ric *RepairInvoiceCreate) createSpec() (*RepairInvoice, *sqlgraph.CreateSpec) {
	var (
		ri    = &RepairInvoice{config: ric.config}
		_spec = &sqlgraph.CreateSpec{
			Table: repairinvoice.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: repairinvoice.FieldID,
			},
		}
	)
	if value, ok := ric.mutation.Rename(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: repairinvoice.FieldRename,
		})
		ri.Rename = value
	}
	if nodes := ric.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.DeviceTable,
			Columns: []string{repairinvoice.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ric.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.StatusTable,
			Columns: []string{repairinvoice.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusr.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ric.mutation.SymptomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.SymptomTable,
			Columns: []string{repairinvoice.SymptomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: symptom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ric.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.UserTable,
			Columns: []string{repairinvoice.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ric.mutation.ReturninvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   repairinvoice.ReturninvoiceTable,
			Columns: []string{repairinvoice.ReturninvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: returninvoice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ric.mutation.BillIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   repairinvoice.BillTable,
			Columns: []string{repairinvoice.BillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ric.mutation.PartInformationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   repairinvoice.PartInformationsTable,
			Columns: []string{repairinvoice.PartInformationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partorder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return ri, _spec
}
