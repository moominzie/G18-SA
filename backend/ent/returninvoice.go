// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/moominzie/user-record/ent/employee"
	"github.com/moominzie/user-record/ent/repairinvoice"
	"github.com/moominzie/user-record/ent/returninvoice"
	"github.com/moominzie/user-record/ent/statust"
)

// Returninvoice is the model entity for the Returninvoice schema.
type Returninvoice struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Addedtime holds the value of the "addedtime" field.
	Addedtime time.Time `json:"addedtime,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReturninvoiceQuery when eager-loading is set.
	Edges            ReturninvoiceEdges `json:"edges"`
	employee_id      *int
	returninvoice_id *int
	statust_id       *int
}

// ReturninvoiceEdges holds the relations/edges for other nodes in the graph.
type ReturninvoiceEdges struct {
	// Repairinvoice holds the value of the Repairinvoice edge.
	Repairinvoice *RepairInvoice
	// Employee holds the value of the Employee edge.
	Employee *Employee
	// Statust holds the value of the Statust edge.
	Statust *Statust
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RepairinvoiceOrErr returns the Repairinvoice value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReturninvoiceEdges) RepairinvoiceOrErr() (*RepairInvoice, error) {
	if e.loadedTypes[0] {
		if e.Repairinvoice == nil {
			// The edge Repairinvoice was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: repairinvoice.Label}
		}
		return e.Repairinvoice, nil
	}
	return nil, &NotLoadedError{edge: "Repairinvoice"}
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReturninvoiceEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[1] {
		if e.Employee == nil {
			// The edge Employee was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "Employee"}
}

// StatustOrErr returns the Statust value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReturninvoiceEdges) StatustOrErr() (*Statust, error) {
	if e.loadedTypes[2] {
		if e.Statust == nil {
			// The edge Statust was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: statust.Label}
		}
		return e.Statust, nil
	}
	return nil, &NotLoadedError{edge: "Statust"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Returninvoice) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // addedtime
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Returninvoice) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // employee_id
		&sql.NullInt64{}, // returninvoice_id
		&sql.NullInt64{}, // statust_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Returninvoice fields.
func (r *Returninvoice) assignValues(values ...interface{}) error {
	if m, n := len(values), len(returninvoice.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field addedtime", values[0])
	} else if value.Valid {
		r.Addedtime = value.Time
	}
	values = values[1:]
	if len(values) == len(returninvoice.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field employee_id", value)
		} else if value.Valid {
			r.employee_id = new(int)
			*r.employee_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field returninvoice_id", value)
		} else if value.Valid {
			r.returninvoice_id = new(int)
			*r.returninvoice_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field statust_id", value)
		} else if value.Valid {
			r.statust_id = new(int)
			*r.statust_id = int(value.Int64)
		}
	}
	return nil
}

// QueryRepairinvoice queries the Repairinvoice edge of the Returninvoice.
func (r *Returninvoice) QueryRepairinvoice() *RepairInvoiceQuery {
	return (&ReturninvoiceClient{config: r.config}).QueryRepairinvoice(r)
}

// QueryEmployee queries the Employee edge of the Returninvoice.
func (r *Returninvoice) QueryEmployee() *EmployeeQuery {
	return (&ReturninvoiceClient{config: r.config}).QueryEmployee(r)
}

// QueryStatust queries the Statust edge of the Returninvoice.
func (r *Returninvoice) QueryStatust() *StatustQuery {
	return (&ReturninvoiceClient{config: r.config}).QueryStatust(r)
}

// Update returns a builder for updating this Returninvoice.
// Note that, you need to call Returninvoice.Unwrap() before calling this method, if this Returninvoice
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Returninvoice) Update() *ReturninvoiceUpdateOne {
	return (&ReturninvoiceClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Returninvoice) Unwrap() *Returninvoice {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Returninvoice is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Returninvoice) String() string {
	var builder strings.Builder
	builder.WriteString("Returninvoice(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", addedtime=")
	builder.WriteString(r.Addedtime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Returninvoices is a parsable slice of Returninvoice.
type Returninvoices []*Returninvoice

func (r Returninvoices) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
