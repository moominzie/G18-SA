// Code generated by entc, DO NOT EDIT.

package repairinvoice

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/moominzie/user-record/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Rename applies equality check predicate on the "Rename" field. It's identical to RenameEQ.
func Rename(v string) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRename), v))
	})
}

// RenameEQ applies the EQ predicate on the "Rename" field.
func RenameEQ(v string) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRename), v))
	})
}

// RenameNEQ applies the NEQ predicate on the "Rename" field.
func RenameNEQ(v string) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRename), v))
	})
}

// RenameIn applies the In predicate on the "Rename" field.
func RenameIn(vs ...string) predicate.RepairInvoice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RepairInvoice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRename), v...))
	})
}

// RenameNotIn applies the NotIn predicate on the "Rename" field.
func RenameNotIn(vs ...string) predicate.RepairInvoice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RepairInvoice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRename), v...))
	})
}

// RenameGT applies the GT predicate on the "Rename" field.
func RenameGT(v string) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRename), v))
	})
}

// RenameGTE applies the GTE predicate on the "Rename" field.
func RenameGTE(v string) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRename), v))
	})
}

// RenameLT applies the LT predicate on the "Rename" field.
func RenameLT(v string) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRename), v))
	})
}

// RenameLTE applies the LTE predicate on the "Rename" field.
func RenameLTE(v string) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRename), v))
	})
}

// RenameContains applies the Contains predicate on the "Rename" field.
func RenameContains(v string) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRename), v))
	})
}

// RenameHasPrefix applies the HasPrefix predicate on the "Rename" field.
func RenameHasPrefix(v string) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRename), v))
	})
}

// RenameHasSuffix applies the HasSuffix predicate on the "Rename" field.
func RenameHasSuffix(v string) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRename), v))
	})
}

// RenameEqualFold applies the EqualFold predicate on the "Rename" field.
func RenameEqualFold(v string) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRename), v))
	})
}

// RenameContainsFold applies the ContainsFold predicate on the "Rename" field.
func RenameContainsFold(v string) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRename), v))
	})
}

// HasDevice applies the HasEdge predicate on the "device" edge.
func HasDevice() predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DeviceTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DeviceTable, DeviceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeviceWith applies the HasEdge predicate on the "device" edge with a given conditions (other predicates).
func HasDeviceWith(preds ...predicate.Device) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DeviceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DeviceTable, DeviceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatus applies the HasEdge predicate on the "status" edge.
func HasStatus() predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatusTable, StatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusWith applies the HasEdge predicate on the "status" edge with a given conditions (other predicates).
func HasStatusWith(preds ...predicate.StatusR) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatusTable, StatusColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSymptom applies the HasEdge predicate on the "symptom" edge.
func HasSymptom() predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SymptomTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SymptomTable, SymptomColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSymptomWith applies the HasEdge predicate on the "symptom" edge with a given conditions (other predicates).
func HasSymptomWith(preds ...predicate.Symptom) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SymptomInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SymptomTable, SymptomColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReturninvoice applies the HasEdge predicate on the "returninvoice" edge.
func HasReturninvoice() predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReturninvoiceTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ReturninvoiceTable, ReturninvoiceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReturninvoiceWith applies the HasEdge predicate on the "returninvoice" edge with a given conditions (other predicates).
func HasReturninvoiceWith(preds ...predicate.Returninvoice) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReturninvoiceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ReturninvoiceTable, ReturninvoiceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBill applies the HasEdge predicate on the "bill" edge.
func HasBill() predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BillTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BillTable, BillColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBillWith applies the HasEdge predicate on the "bill" edge with a given conditions (other predicates).
func HasBillWith(preds ...predicate.Bill) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BillInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BillTable, BillColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.RepairInvoice) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.RepairInvoice) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RepairInvoice) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		p(s.Not())
	})
}
