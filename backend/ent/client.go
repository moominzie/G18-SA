// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/moominzie/user-record/ent/migrate"

	"github.com/moominzie/user-record/ent/bill"
	"github.com/moominzie/user-record/ent/billingstatus"
	"github.com/moominzie/user-record/ent/branch"
	"github.com/moominzie/user-record/ent/building"
	"github.com/moominzie/user-record/ent/device"
	"github.com/moominzie/user-record/ent/employee"
	"github.com/moominzie/user-record/ent/faculty"
	"github.com/moominzie/user-record/ent/repairinvoice"
	"github.com/moominzie/user-record/ent/returninvoice"
	"github.com/moominzie/user-record/ent/room"
	"github.com/moominzie/user-record/ent/statusr"
	"github.com/moominzie/user-record/ent/statust"
	"github.com/moominzie/user-record/ent/symptom"
	"github.com/moominzie/user-record/ent/user"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Bill is the client for interacting with the Bill builders.
	Bill *BillClient
	// Billingstatus is the client for interacting with the Billingstatus builders.
	Billingstatus *BillingstatusClient
	// Branch is the client for interacting with the Branch builders.
	Branch *BranchClient
	// Building is the client for interacting with the Building builders.
	Building *BuildingClient
	// Device is the client for interacting with the Device builders.
	Device *DeviceClient
	// Employee is the client for interacting with the Employee builders.
	Employee *EmployeeClient
	// Faculty is the client for interacting with the Faculty builders.
	Faculty *FacultyClient
	// RepairInvoice is the client for interacting with the RepairInvoice builders.
	RepairInvoice *RepairInvoiceClient
	// Returninvoice is the client for interacting with the Returninvoice builders.
	Returninvoice *ReturninvoiceClient
	// Room is the client for interacting with the Room builders.
	Room *RoomClient
	// StatusR is the client for interacting with the StatusR builders.
	StatusR *StatusRClient
	// Statust is the client for interacting with the Statust builders.
	Statust *StatustClient
	// Symptom is the client for interacting with the Symptom builders.
	Symptom *SymptomClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Bill = NewBillClient(c.config)
	c.Billingstatus = NewBillingstatusClient(c.config)
	c.Branch = NewBranchClient(c.config)
	c.Building = NewBuildingClient(c.config)
	c.Device = NewDeviceClient(c.config)
	c.Employee = NewEmployeeClient(c.config)
	c.Faculty = NewFacultyClient(c.config)
	c.RepairInvoice = NewRepairInvoiceClient(c.config)
	c.Returninvoice = NewReturninvoiceClient(c.config)
	c.Room = NewRoomClient(c.config)
	c.StatusR = NewStatusRClient(c.config)
	c.Statust = NewStatustClient(c.config)
	c.Symptom = NewSymptomClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Bill:          NewBillClient(cfg),
		Billingstatus: NewBillingstatusClient(cfg),
		Branch:        NewBranchClient(cfg),
		Building:      NewBuildingClient(cfg),
		Device:        NewDeviceClient(cfg),
		Employee:      NewEmployeeClient(cfg),
		Faculty:       NewFacultyClient(cfg),
		RepairInvoice: NewRepairInvoiceClient(cfg),
		Returninvoice: NewReturninvoiceClient(cfg),
		Room:          NewRoomClient(cfg),
		StatusR:       NewStatusRClient(cfg),
		Statust:       NewStatustClient(cfg),
		Symptom:       NewSymptomClient(cfg),
		User:          NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:        cfg,
		Bill:          NewBillClient(cfg),
		Billingstatus: NewBillingstatusClient(cfg),
		Branch:        NewBranchClient(cfg),
		Building:      NewBuildingClient(cfg),
		Device:        NewDeviceClient(cfg),
		Employee:      NewEmployeeClient(cfg),
		Faculty:       NewFacultyClient(cfg),
		RepairInvoice: NewRepairInvoiceClient(cfg),
		Returninvoice: NewReturninvoiceClient(cfg),
		Room:          NewRoomClient(cfg),
		StatusR:       NewStatusRClient(cfg),
		Statust:       NewStatustClient(cfg),
		Symptom:       NewSymptomClient(cfg),
		User:          NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Bill.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Bill.Use(hooks...)
	c.Billingstatus.Use(hooks...)
	c.Branch.Use(hooks...)
	c.Building.Use(hooks...)
	c.Device.Use(hooks...)
	c.Employee.Use(hooks...)
	c.Faculty.Use(hooks...)
	c.RepairInvoice.Use(hooks...)
	c.Returninvoice.Use(hooks...)
	c.Room.Use(hooks...)
	c.StatusR.Use(hooks...)
	c.Statust.Use(hooks...)
	c.Symptom.Use(hooks...)
	c.User.Use(hooks...)
}

// BillClient is a client for the Bill schema.
type BillClient struct {
	config
}

// NewBillClient returns a client for the Bill from the given config.
func NewBillClient(c config) *BillClient {
	return &BillClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bill.Hooks(f(g(h())))`.
func (c *BillClient) Use(hooks ...Hook) {
	c.hooks.Bill = append(c.hooks.Bill, hooks...)
}

// Create returns a create builder for Bill.
func (c *BillClient) Create() *BillCreate {
	mutation := newBillMutation(c.config, OpCreate)
	return &BillCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Bill.
func (c *BillClient) Update() *BillUpdate {
	mutation := newBillMutation(c.config, OpUpdate)
	return &BillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillClient) UpdateOne(b *Bill) *BillUpdateOne {
	mutation := newBillMutation(c.config, OpUpdateOne, withBill(b))
	return &BillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillClient) UpdateOneID(id int) *BillUpdateOne {
	mutation := newBillMutation(c.config, OpUpdateOne, withBillID(id))
	return &BillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Bill.
func (c *BillClient) Delete() *BillDelete {
	mutation := newBillMutation(c.config, OpDelete)
	return &BillDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BillClient) DeleteOne(b *Bill) *BillDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BillClient) DeleteOneID(id int) *BillDeleteOne {
	builder := c.Delete().Where(bill.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillDeleteOne{builder}
}

// Create returns a query builder for Bill.
func (c *BillClient) Query() *BillQuery {
	return &BillQuery{config: c.config}
}

// Get returns a Bill entity by its id.
func (c *BillClient) Get(ctx context.Context, id int) (*Bill, error) {
	return c.Query().Where(bill.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillClient) GetX(ctx context.Context, id int) *Bill {
	b, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return b
}

// QueryRepairinvoice queries the Repairinvoice edge of a Bill.
func (c *BillClient) QueryRepairinvoice(b *Bill) *RepairInvoiceQuery {
	query := &RepairInvoiceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bill.Table, bill.FieldID, id),
			sqlgraph.To(repairinvoice.Table, repairinvoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, bill.RepairinvoiceTable, bill.RepairinvoiceColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the Employee edge of a Bill.
func (c *BillClient) QueryEmployee(b *Bill) *EmployeeQuery {
	query := &EmployeeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bill.Table, bill.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bill.EmployeeTable, bill.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingstatus queries the Billingstatus edge of a Bill.
func (c *BillClient) QueryBillingstatus(b *Bill) *BillingstatusQuery {
	query := &BillingstatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bill.Table, bill.FieldID, id),
			sqlgraph.To(billingstatus.Table, billingstatus.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bill.BillingstatusTable, bill.BillingstatusColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BillClient) Hooks() []Hook {
	return c.hooks.Bill
}

// BillingstatusClient is a client for the Billingstatus schema.
type BillingstatusClient struct {
	config
}

// NewBillingstatusClient returns a client for the Billingstatus from the given config.
func NewBillingstatusClient(c config) *BillingstatusClient {
	return &BillingstatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `billingstatus.Hooks(f(g(h())))`.
func (c *BillingstatusClient) Use(hooks ...Hook) {
	c.hooks.Billingstatus = append(c.hooks.Billingstatus, hooks...)
}

// Create returns a create builder for Billingstatus.
func (c *BillingstatusClient) Create() *BillingstatusCreate {
	mutation := newBillingstatusMutation(c.config, OpCreate)
	return &BillingstatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Billingstatus.
func (c *BillingstatusClient) Update() *BillingstatusUpdate {
	mutation := newBillingstatusMutation(c.config, OpUpdate)
	return &BillingstatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillingstatusClient) UpdateOne(b *Billingstatus) *BillingstatusUpdateOne {
	mutation := newBillingstatusMutation(c.config, OpUpdateOne, withBillingstatus(b))
	return &BillingstatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillingstatusClient) UpdateOneID(id int) *BillingstatusUpdateOne {
	mutation := newBillingstatusMutation(c.config, OpUpdateOne, withBillingstatusID(id))
	return &BillingstatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Billingstatus.
func (c *BillingstatusClient) Delete() *BillingstatusDelete {
	mutation := newBillingstatusMutation(c.config, OpDelete)
	return &BillingstatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BillingstatusClient) DeleteOne(b *Billingstatus) *BillingstatusDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BillingstatusClient) DeleteOneID(id int) *BillingstatusDeleteOne {
	builder := c.Delete().Where(billingstatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillingstatusDeleteOne{builder}
}

// Create returns a query builder for Billingstatus.
func (c *BillingstatusClient) Query() *BillingstatusQuery {
	return &BillingstatusQuery{config: c.config}
}

// Get returns a Billingstatus entity by its id.
func (c *BillingstatusClient) Get(ctx context.Context, id int) (*Billingstatus, error) {
	return c.Query().Where(billingstatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillingstatusClient) GetX(ctx context.Context, id int) *Billingstatus {
	b, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return b
}

// QueryBillingstatuss queries the billingstatuss edge of a Billingstatus.
func (c *BillingstatusClient) QueryBillingstatuss(b *Billingstatus) *BillQuery {
	query := &BillQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billingstatus.Table, billingstatus.FieldID, id),
			sqlgraph.To(bill.Table, bill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, billingstatus.BillingstatussTable, billingstatus.BillingstatussColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BillingstatusClient) Hooks() []Hook {
	return c.hooks.Billingstatus
}

// BranchClient is a client for the Branch schema.
type BranchClient struct {
	config
}

// NewBranchClient returns a client for the Branch from the given config.
func NewBranchClient(c config) *BranchClient {
	return &BranchClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `branch.Hooks(f(g(h())))`.
func (c *BranchClient) Use(hooks ...Hook) {
	c.hooks.Branch = append(c.hooks.Branch, hooks...)
}

// Create returns a create builder for Branch.
func (c *BranchClient) Create() *BranchCreate {
	mutation := newBranchMutation(c.config, OpCreate)
	return &BranchCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Branch.
func (c *BranchClient) Update() *BranchUpdate {
	mutation := newBranchMutation(c.config, OpUpdate)
	return &BranchUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BranchClient) UpdateOne(b *Branch) *BranchUpdateOne {
	mutation := newBranchMutation(c.config, OpUpdateOne, withBranch(b))
	return &BranchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BranchClient) UpdateOneID(id int) *BranchUpdateOne {
	mutation := newBranchMutation(c.config, OpUpdateOne, withBranchID(id))
	return &BranchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Branch.
func (c *BranchClient) Delete() *BranchDelete {
	mutation := newBranchMutation(c.config, OpDelete)
	return &BranchDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BranchClient) DeleteOne(b *Branch) *BranchDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BranchClient) DeleteOneID(id int) *BranchDeleteOne {
	builder := c.Delete().Where(branch.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BranchDeleteOne{builder}
}

// Create returns a query builder for Branch.
func (c *BranchClient) Query() *BranchQuery {
	return &BranchQuery{config: c.config}
}

// Get returns a Branch entity by its id.
func (c *BranchClient) Get(ctx context.Context, id int) (*Branch, error) {
	return c.Query().Where(branch.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BranchClient) GetX(ctx context.Context, id int) *Branch {
	b, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return b
}

// QueryFaculty queries the faculty edge of a Branch.
func (c *BranchClient) QueryFaculty(b *Branch) *FacultyQuery {
	query := &FacultyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(branch.Table, branch.FieldID, id),
			sqlgraph.To(faculty.Table, faculty.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, branch.FacultyTable, branch.FacultyColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserInformations queries the user_informations edge of a Branch.
func (c *BranchClient) QueryUserInformations(b *Branch) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(branch.Table, branch.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, branch.UserInformationsTable, branch.UserInformationsColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BranchClient) Hooks() []Hook {
	return c.hooks.Branch
}

// BuildingClient is a client for the Building schema.
type BuildingClient struct {
	config
}

// NewBuildingClient returns a client for the Building from the given config.
func NewBuildingClient(c config) *BuildingClient {
	return &BuildingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `building.Hooks(f(g(h())))`.
func (c *BuildingClient) Use(hooks ...Hook) {
	c.hooks.Building = append(c.hooks.Building, hooks...)
}

// Create returns a create builder for Building.
func (c *BuildingClient) Create() *BuildingCreate {
	mutation := newBuildingMutation(c.config, OpCreate)
	return &BuildingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Building.
func (c *BuildingClient) Update() *BuildingUpdate {
	mutation := newBuildingMutation(c.config, OpUpdate)
	return &BuildingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BuildingClient) UpdateOne(b *Building) *BuildingUpdateOne {
	mutation := newBuildingMutation(c.config, OpUpdateOne, withBuilding(b))
	return &BuildingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BuildingClient) UpdateOneID(id int) *BuildingUpdateOne {
	mutation := newBuildingMutation(c.config, OpUpdateOne, withBuildingID(id))
	return &BuildingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Building.
func (c *BuildingClient) Delete() *BuildingDelete {
	mutation := newBuildingMutation(c.config, OpDelete)
	return &BuildingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BuildingClient) DeleteOne(b *Building) *BuildingDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BuildingClient) DeleteOneID(id int) *BuildingDeleteOne {
	builder := c.Delete().Where(building.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BuildingDeleteOne{builder}
}

// Create returns a query builder for Building.
func (c *BuildingClient) Query() *BuildingQuery {
	return &BuildingQuery{config: c.config}
}

// Get returns a Building entity by its id.
func (c *BuildingClient) Get(ctx context.Context, id int) (*Building, error) {
	return c.Query().Where(building.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BuildingClient) GetX(ctx context.Context, id int) *Building {
	b, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return b
}

// QueryRooms queries the rooms edge of a Building.
func (c *BuildingClient) QueryRooms(b *Building) *RoomQuery {
	query := &RoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(building.Table, building.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, building.RoomsTable, building.RoomsColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserInformations queries the user_informations edge of a Building.
func (c *BuildingClient) QueryUserInformations(b *Building) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(building.Table, building.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, building.UserInformationsTable, building.UserInformationsColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BuildingClient) Hooks() []Hook {
	return c.hooks.Building
}

// DeviceClient is a client for the Device schema.
type DeviceClient struct {
	config
}

// NewDeviceClient returns a client for the Device from the given config.
func NewDeviceClient(c config) *DeviceClient {
	return &DeviceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `device.Hooks(f(g(h())))`.
func (c *DeviceClient) Use(hooks ...Hook) {
	c.hooks.Device = append(c.hooks.Device, hooks...)
}

// Create returns a create builder for Device.
func (c *DeviceClient) Create() *DeviceCreate {
	mutation := newDeviceMutation(c.config, OpCreate)
	return &DeviceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Device.
func (c *DeviceClient) Update() *DeviceUpdate {
	mutation := newDeviceMutation(c.config, OpUpdate)
	return &DeviceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeviceClient) UpdateOne(d *Device) *DeviceUpdateOne {
	mutation := newDeviceMutation(c.config, OpUpdateOne, withDevice(d))
	return &DeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeviceClient) UpdateOneID(id int) *DeviceUpdateOne {
	mutation := newDeviceMutation(c.config, OpUpdateOne, withDeviceID(id))
	return &DeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Device.
func (c *DeviceClient) Delete() *DeviceDelete {
	mutation := newDeviceMutation(c.config, OpDelete)
	return &DeviceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DeviceClient) DeleteOne(d *Device) *DeviceDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DeviceClient) DeleteOneID(id int) *DeviceDeleteOne {
	builder := c.Delete().Where(device.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeviceDeleteOne{builder}
}

// Create returns a query builder for Device.
func (c *DeviceClient) Query() *DeviceQuery {
	return &DeviceQuery{config: c.config}
}

// Get returns a Device entity by its id.
func (c *DeviceClient) Get(ctx context.Context, id int) (*Device, error) {
	return c.Query().Where(device.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeviceClient) GetX(ctx context.Context, id int) *Device {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryRepairInformation queries the repair_information edge of a Device.
func (c *DeviceClient) QueryRepairInformation(d *Device) *RepairInvoiceQuery {
	query := &RepairInvoiceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(device.Table, device.FieldID, id),
			sqlgraph.To(repairinvoice.Table, repairinvoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, device.RepairInformationTable, device.RepairInformationColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeviceClient) Hooks() []Hook {
	return c.hooks.Device
}

// EmployeeClient is a client for the Employee schema.
type EmployeeClient struct {
	config
}

// NewEmployeeClient returns a client for the Employee from the given config.
func NewEmployeeClient(c config) *EmployeeClient {
	return &EmployeeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employee.Hooks(f(g(h())))`.
func (c *EmployeeClient) Use(hooks ...Hook) {
	c.hooks.Employee = append(c.hooks.Employee, hooks...)
}

// Create returns a create builder for Employee.
func (c *EmployeeClient) Create() *EmployeeCreate {
	mutation := newEmployeeMutation(c.config, OpCreate)
	return &EmployeeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Employee.
func (c *EmployeeClient) Update() *EmployeeUpdate {
	mutation := newEmployeeMutation(c.config, OpUpdate)
	return &EmployeeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeeClient) UpdateOne(e *Employee) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployee(e))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeeClient) UpdateOneID(id int) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployeeID(id))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Employee.
func (c *EmployeeClient) Delete() *EmployeeDelete {
	mutation := newEmployeeMutation(c.config, OpDelete)
	return &EmployeeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EmployeeClient) DeleteOne(e *Employee) *EmployeeDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EmployeeClient) DeleteOneID(id int) *EmployeeDeleteOne {
	builder := c.Delete().Where(employee.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeeDeleteOne{builder}
}

// Create returns a query builder for Employee.
func (c *EmployeeClient) Query() *EmployeeQuery {
	return &EmployeeQuery{config: c.config}
}

// Get returns a Employee entity by its id.
func (c *EmployeeClient) Get(ctx context.Context, id int) (*Employee, error) {
	return c.Query().Where(employee.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeeClient) GetX(ctx context.Context, id int) *Employee {
	e, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return e
}

// QueryEmployees queries the employees edge of a Employee.
func (c *EmployeeClient) QueryEmployees(e *Employee) *ReturninvoiceQuery {
	query := &ReturninvoiceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(returninvoice.Table, returninvoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.EmployeesTable, employee.EmployeesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployeebill queries the employeebill edge of a Employee.
func (c *EmployeeClient) QueryEmployeebill(e *Employee) *BillQuery {
	query := &BillQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(bill.Table, bill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.EmployeebillTable, employee.EmployeebillColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmployeeClient) Hooks() []Hook {
	return c.hooks.Employee
}

// FacultyClient is a client for the Faculty schema.
type FacultyClient struct {
	config
}

// NewFacultyClient returns a client for the Faculty from the given config.
func NewFacultyClient(c config) *FacultyClient {
	return &FacultyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `faculty.Hooks(f(g(h())))`.
func (c *FacultyClient) Use(hooks ...Hook) {
	c.hooks.Faculty = append(c.hooks.Faculty, hooks...)
}

// Create returns a create builder for Faculty.
func (c *FacultyClient) Create() *FacultyCreate {
	mutation := newFacultyMutation(c.config, OpCreate)
	return &FacultyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Faculty.
func (c *FacultyClient) Update() *FacultyUpdate {
	mutation := newFacultyMutation(c.config, OpUpdate)
	return &FacultyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FacultyClient) UpdateOne(f *Faculty) *FacultyUpdateOne {
	mutation := newFacultyMutation(c.config, OpUpdateOne, withFaculty(f))
	return &FacultyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FacultyClient) UpdateOneID(id int) *FacultyUpdateOne {
	mutation := newFacultyMutation(c.config, OpUpdateOne, withFacultyID(id))
	return &FacultyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Faculty.
func (c *FacultyClient) Delete() *FacultyDelete {
	mutation := newFacultyMutation(c.config, OpDelete)
	return &FacultyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FacultyClient) DeleteOne(f *Faculty) *FacultyDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FacultyClient) DeleteOneID(id int) *FacultyDeleteOne {
	builder := c.Delete().Where(faculty.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FacultyDeleteOne{builder}
}

// Create returns a query builder for Faculty.
func (c *FacultyClient) Query() *FacultyQuery {
	return &FacultyQuery{config: c.config}
}

// Get returns a Faculty entity by its id.
func (c *FacultyClient) Get(ctx context.Context, id int) (*Faculty, error) {
	return c.Query().Where(faculty.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FacultyClient) GetX(ctx context.Context, id int) *Faculty {
	f, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return f
}

// QueryBranchs queries the branchs edge of a Faculty.
func (c *FacultyClient) QueryBranchs(f *Faculty) *BranchQuery {
	query := &BranchQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(faculty.Table, faculty.FieldID, id),
			sqlgraph.To(branch.Table, branch.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, faculty.BranchsTable, faculty.BranchsColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserInformations queries the user_informations edge of a Faculty.
func (c *FacultyClient) QueryUserInformations(f *Faculty) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(faculty.Table, faculty.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, faculty.UserInformationsTable, faculty.UserInformationsColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FacultyClient) Hooks() []Hook {
	return c.hooks.Faculty
}

// RepairInvoiceClient is a client for the RepairInvoice schema.
type RepairInvoiceClient struct {
	config
}

// NewRepairInvoiceClient returns a client for the RepairInvoice from the given config.
func NewRepairInvoiceClient(c config) *RepairInvoiceClient {
	return &RepairInvoiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `repairinvoice.Hooks(f(g(h())))`.
func (c *RepairInvoiceClient) Use(hooks ...Hook) {
	c.hooks.RepairInvoice = append(c.hooks.RepairInvoice, hooks...)
}

// Create returns a create builder for RepairInvoice.
func (c *RepairInvoiceClient) Create() *RepairInvoiceCreate {
	mutation := newRepairInvoiceMutation(c.config, OpCreate)
	return &RepairInvoiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for RepairInvoice.
func (c *RepairInvoiceClient) Update() *RepairInvoiceUpdate {
	mutation := newRepairInvoiceMutation(c.config, OpUpdate)
	return &RepairInvoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RepairInvoiceClient) UpdateOne(ri *RepairInvoice) *RepairInvoiceUpdateOne {
	mutation := newRepairInvoiceMutation(c.config, OpUpdateOne, withRepairInvoice(ri))
	return &RepairInvoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RepairInvoiceClient) UpdateOneID(id int) *RepairInvoiceUpdateOne {
	mutation := newRepairInvoiceMutation(c.config, OpUpdateOne, withRepairInvoiceID(id))
	return &RepairInvoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RepairInvoice.
func (c *RepairInvoiceClient) Delete() *RepairInvoiceDelete {
	mutation := newRepairInvoiceMutation(c.config, OpDelete)
	return &RepairInvoiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RepairInvoiceClient) DeleteOne(ri *RepairInvoice) *RepairInvoiceDeleteOne {
	return c.DeleteOneID(ri.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RepairInvoiceClient) DeleteOneID(id int) *RepairInvoiceDeleteOne {
	builder := c.Delete().Where(repairinvoice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RepairInvoiceDeleteOne{builder}
}

// Create returns a query builder for RepairInvoice.
func (c *RepairInvoiceClient) Query() *RepairInvoiceQuery {
	return &RepairInvoiceQuery{config: c.config}
}

// Get returns a RepairInvoice entity by its id.
func (c *RepairInvoiceClient) Get(ctx context.Context, id int) (*RepairInvoice, error) {
	return c.Query().Where(repairinvoice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RepairInvoiceClient) GetX(ctx context.Context, id int) *RepairInvoice {
	ri, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ri
}

// QueryDevice queries the device edge of a RepairInvoice.
func (c *RepairInvoiceClient) QueryDevice(ri *RepairInvoice) *DeviceQuery {
	query := &DeviceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ri.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repairinvoice.Table, repairinvoice.FieldID, id),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, repairinvoice.DeviceTable, repairinvoice.DeviceColumn),
		)
		fromV = sqlgraph.Neighbors(ri.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatus queries the status edge of a RepairInvoice.
func (c *RepairInvoiceClient) QueryStatus(ri *RepairInvoice) *StatusRQuery {
	query := &StatusRQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ri.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repairinvoice.Table, repairinvoice.FieldID, id),
			sqlgraph.To(statusr.Table, statusr.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, repairinvoice.StatusTable, repairinvoice.StatusColumn),
		)
		fromV = sqlgraph.Neighbors(ri.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySymptom queries the symptom edge of a RepairInvoice.
func (c *RepairInvoiceClient) QuerySymptom(ri *RepairInvoice) *SymptomQuery {
	query := &SymptomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ri.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repairinvoice.Table, repairinvoice.FieldID, id),
			sqlgraph.To(symptom.Table, symptom.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, repairinvoice.SymptomTable, repairinvoice.SymptomColumn),
		)
		fromV = sqlgraph.Neighbors(ri.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a RepairInvoice.
func (c *RepairInvoiceClient) QueryUser(ri *RepairInvoice) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ri.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repairinvoice.Table, repairinvoice.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, repairinvoice.UserTable, repairinvoice.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ri.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturninvoice queries the returninvoice edge of a RepairInvoice.
func (c *RepairInvoiceClient) QueryReturninvoice(ri *RepairInvoice) *ReturninvoiceQuery {
	query := &ReturninvoiceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ri.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repairinvoice.Table, repairinvoice.FieldID, id),
			sqlgraph.To(returninvoice.Table, returninvoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, repairinvoice.ReturninvoiceTable, repairinvoice.ReturninvoiceColumn),
		)
		fromV = sqlgraph.Neighbors(ri.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBill queries the bill edge of a RepairInvoice.
func (c *RepairInvoiceClient) QueryBill(ri *RepairInvoice) *BillQuery {
	query := &BillQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ri.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repairinvoice.Table, repairinvoice.FieldID, id),
			sqlgraph.To(bill.Table, bill.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, repairinvoice.BillTable, repairinvoice.BillColumn),
		)
		fromV = sqlgraph.Neighbors(ri.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RepairInvoiceClient) Hooks() []Hook {
	return c.hooks.RepairInvoice
}

// ReturninvoiceClient is a client for the Returninvoice schema.
type ReturninvoiceClient struct {
	config
}

// NewReturninvoiceClient returns a client for the Returninvoice from the given config.
func NewReturninvoiceClient(c config) *ReturninvoiceClient {
	return &ReturninvoiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `returninvoice.Hooks(f(g(h())))`.
func (c *ReturninvoiceClient) Use(hooks ...Hook) {
	c.hooks.Returninvoice = append(c.hooks.Returninvoice, hooks...)
}

// Create returns a create builder for Returninvoice.
func (c *ReturninvoiceClient) Create() *ReturninvoiceCreate {
	mutation := newReturninvoiceMutation(c.config, OpCreate)
	return &ReturninvoiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Returninvoice.
func (c *ReturninvoiceClient) Update() *ReturninvoiceUpdate {
	mutation := newReturninvoiceMutation(c.config, OpUpdate)
	return &ReturninvoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReturninvoiceClient) UpdateOne(r *Returninvoice) *ReturninvoiceUpdateOne {
	mutation := newReturninvoiceMutation(c.config, OpUpdateOne, withReturninvoice(r))
	return &ReturninvoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReturninvoiceClient) UpdateOneID(id int) *ReturninvoiceUpdateOne {
	mutation := newReturninvoiceMutation(c.config, OpUpdateOne, withReturninvoiceID(id))
	return &ReturninvoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Returninvoice.
func (c *ReturninvoiceClient) Delete() *ReturninvoiceDelete {
	mutation := newReturninvoiceMutation(c.config, OpDelete)
	return &ReturninvoiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ReturninvoiceClient) DeleteOne(r *Returninvoice) *ReturninvoiceDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ReturninvoiceClient) DeleteOneID(id int) *ReturninvoiceDeleteOne {
	builder := c.Delete().Where(returninvoice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReturninvoiceDeleteOne{builder}
}

// Create returns a query builder for Returninvoice.
func (c *ReturninvoiceClient) Query() *ReturninvoiceQuery {
	return &ReturninvoiceQuery{config: c.config}
}

// Get returns a Returninvoice entity by its id.
func (c *ReturninvoiceClient) Get(ctx context.Context, id int) (*Returninvoice, error) {
	return c.Query().Where(returninvoice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReturninvoiceClient) GetX(ctx context.Context, id int) *Returninvoice {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// QueryRepairinvoice queries the Repairinvoice edge of a Returninvoice.
func (c *ReturninvoiceClient) QueryRepairinvoice(r *Returninvoice) *RepairInvoiceQuery {
	query := &RepairInvoiceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returninvoice.Table, returninvoice.FieldID, id),
			sqlgraph.To(repairinvoice.Table, repairinvoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, returninvoice.RepairinvoiceTable, returninvoice.RepairinvoiceColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the Employee edge of a Returninvoice.
func (c *ReturninvoiceClient) QueryEmployee(r *Returninvoice) *EmployeeQuery {
	query := &EmployeeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returninvoice.Table, returninvoice.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, returninvoice.EmployeeTable, returninvoice.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatust queries the Statust edge of a Returninvoice.
func (c *ReturninvoiceClient) QueryStatust(r *Returninvoice) *StatustQuery {
	query := &StatustQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returninvoice.Table, returninvoice.FieldID, id),
			sqlgraph.To(statust.Table, statust.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, returninvoice.StatustTable, returninvoice.StatustColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ReturninvoiceClient) Hooks() []Hook {
	return c.hooks.Returninvoice
}

// RoomClient is a client for the Room schema.
type RoomClient struct {
	config
}

// NewRoomClient returns a client for the Room from the given config.
func NewRoomClient(c config) *RoomClient {
	return &RoomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `room.Hooks(f(g(h())))`.
func (c *RoomClient) Use(hooks ...Hook) {
	c.hooks.Room = append(c.hooks.Room, hooks...)
}

// Create returns a create builder for Room.
func (c *RoomClient) Create() *RoomCreate {
	mutation := newRoomMutation(c.config, OpCreate)
	return &RoomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Room.
func (c *RoomClient) Update() *RoomUpdate {
	mutation := newRoomMutation(c.config, OpUpdate)
	return &RoomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomClient) UpdateOne(r *Room) *RoomUpdateOne {
	mutation := newRoomMutation(c.config, OpUpdateOne, withRoom(r))
	return &RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomClient) UpdateOneID(id int) *RoomUpdateOne {
	mutation := newRoomMutation(c.config, OpUpdateOne, withRoomID(id))
	return &RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Room.
func (c *RoomClient) Delete() *RoomDelete {
	mutation := newRoomMutation(c.config, OpDelete)
	return &RoomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoomClient) DeleteOne(r *Room) *RoomDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoomClient) DeleteOneID(id int) *RoomDeleteOne {
	builder := c.Delete().Where(room.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomDeleteOne{builder}
}

// Create returns a query builder for Room.
func (c *RoomClient) Query() *RoomQuery {
	return &RoomQuery{config: c.config}
}

// Get returns a Room entity by its id.
func (c *RoomClient) Get(ctx context.Context, id int) (*Room, error) {
	return c.Query().Where(room.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomClient) GetX(ctx context.Context, id int) *Room {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// QueryBuilding queries the building edge of a Room.
func (c *RoomClient) QueryBuilding(r *Room) *BuildingQuery {
	query := &BuildingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(building.Table, building.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, room.BuildingTable, room.BuildingColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserInformations queries the user_informations edge of a Room.
func (c *RoomClient) QueryUserInformations(r *Room) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, room.UserInformationsTable, room.UserInformationsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoomClient) Hooks() []Hook {
	return c.hooks.Room
}

// StatusRClient is a client for the StatusR schema.
type StatusRClient struct {
	config
}

// NewStatusRClient returns a client for the StatusR from the given config.
func NewStatusRClient(c config) *StatusRClient {
	return &StatusRClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `statusr.Hooks(f(g(h())))`.
func (c *StatusRClient) Use(hooks ...Hook) {
	c.hooks.StatusR = append(c.hooks.StatusR, hooks...)
}

// Create returns a create builder for StatusR.
func (c *StatusRClient) Create() *StatusRCreate {
	mutation := newStatusRMutation(c.config, OpCreate)
	return &StatusRCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for StatusR.
func (c *StatusRClient) Update() *StatusRUpdate {
	mutation := newStatusRMutation(c.config, OpUpdate)
	return &StatusRUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatusRClient) UpdateOne(s *StatusR) *StatusRUpdateOne {
	mutation := newStatusRMutation(c.config, OpUpdateOne, withStatusR(s))
	return &StatusRUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatusRClient) UpdateOneID(id int) *StatusRUpdateOne {
	mutation := newStatusRMutation(c.config, OpUpdateOne, withStatusRID(id))
	return &StatusRUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StatusR.
func (c *StatusRClient) Delete() *StatusRDelete {
	mutation := newStatusRMutation(c.config, OpDelete)
	return &StatusRDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StatusRClient) DeleteOne(s *StatusR) *StatusRDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StatusRClient) DeleteOneID(id int) *StatusRDeleteOne {
	builder := c.Delete().Where(statusr.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatusRDeleteOne{builder}
}

// Create returns a query builder for StatusR.
func (c *StatusRClient) Query() *StatusRQuery {
	return &StatusRQuery{config: c.config}
}

// Get returns a StatusR entity by its id.
func (c *StatusRClient) Get(ctx context.Context, id int) (*StatusR, error) {
	return c.Query().Where(statusr.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatusRClient) GetX(ctx context.Context, id int) *StatusR {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryRepairInformation queries the repair_information edge of a StatusR.
func (c *StatusRClient) QueryRepairInformation(s *StatusR) *RepairInvoiceQuery {
	query := &RepairInvoiceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusr.Table, statusr.FieldID, id),
			sqlgraph.To(repairinvoice.Table, repairinvoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusr.RepairInformationTable, statusr.RepairInformationColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatusRClient) Hooks() []Hook {
	return c.hooks.StatusR
}

// StatustClient is a client for the Statust schema.
type StatustClient struct {
	config
}

// NewStatustClient returns a client for the Statust from the given config.
func NewStatustClient(c config) *StatustClient {
	return &StatustClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `statust.Hooks(f(g(h())))`.
func (c *StatustClient) Use(hooks ...Hook) {
	c.hooks.Statust = append(c.hooks.Statust, hooks...)
}

// Create returns a create builder for Statust.
func (c *StatustClient) Create() *StatustCreate {
	mutation := newStatustMutation(c.config, OpCreate)
	return &StatustCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Statust.
func (c *StatustClient) Update() *StatustUpdate {
	mutation := newStatustMutation(c.config, OpUpdate)
	return &StatustUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatustClient) UpdateOne(s *Statust) *StatustUpdateOne {
	mutation := newStatustMutation(c.config, OpUpdateOne, withStatust(s))
	return &StatustUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatustClient) UpdateOneID(id int) *StatustUpdateOne {
	mutation := newStatustMutation(c.config, OpUpdateOne, withStatustID(id))
	return &StatustUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Statust.
func (c *StatustClient) Delete() *StatustDelete {
	mutation := newStatustMutation(c.config, OpDelete)
	return &StatustDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StatustClient) DeleteOne(s *Statust) *StatustDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StatustClient) DeleteOneID(id int) *StatustDeleteOne {
	builder := c.Delete().Where(statust.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatustDeleteOne{builder}
}

// Create returns a query builder for Statust.
func (c *StatustClient) Query() *StatustQuery {
	return &StatustQuery{config: c.config}
}

// Get returns a Statust entity by its id.
func (c *StatustClient) Get(ctx context.Context, id int) (*Statust, error) {
	return c.Query().Where(statust.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatustClient) GetX(ctx context.Context, id int) *Statust {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryStatusts queries the statusts edge of a Statust.
func (c *StatustClient) QueryStatusts(s *Statust) *ReturninvoiceQuery {
	query := &ReturninvoiceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statust.Table, statust.FieldID, id),
			sqlgraph.To(returninvoice.Table, returninvoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statust.StatustsTable, statust.StatustsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatustClient) Hooks() []Hook {
	return c.hooks.Statust
}

// SymptomClient is a client for the Symptom schema.
type SymptomClient struct {
	config
}

// NewSymptomClient returns a client for the Symptom from the given config.
func NewSymptomClient(c config) *SymptomClient {
	return &SymptomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `symptom.Hooks(f(g(h())))`.
func (c *SymptomClient) Use(hooks ...Hook) {
	c.hooks.Symptom = append(c.hooks.Symptom, hooks...)
}

// Create returns a create builder for Symptom.
func (c *SymptomClient) Create() *SymptomCreate {
	mutation := newSymptomMutation(c.config, OpCreate)
	return &SymptomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Symptom.
func (c *SymptomClient) Update() *SymptomUpdate {
	mutation := newSymptomMutation(c.config, OpUpdate)
	return &SymptomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SymptomClient) UpdateOne(s *Symptom) *SymptomUpdateOne {
	mutation := newSymptomMutation(c.config, OpUpdateOne, withSymptom(s))
	return &SymptomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SymptomClient) UpdateOneID(id int) *SymptomUpdateOne {
	mutation := newSymptomMutation(c.config, OpUpdateOne, withSymptomID(id))
	return &SymptomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Symptom.
func (c *SymptomClient) Delete() *SymptomDelete {
	mutation := newSymptomMutation(c.config, OpDelete)
	return &SymptomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SymptomClient) DeleteOne(s *Symptom) *SymptomDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SymptomClient) DeleteOneID(id int) *SymptomDeleteOne {
	builder := c.Delete().Where(symptom.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SymptomDeleteOne{builder}
}

// Create returns a query builder for Symptom.
func (c *SymptomClient) Query() *SymptomQuery {
	return &SymptomQuery{config: c.config}
}

// Get returns a Symptom entity by its id.
func (c *SymptomClient) Get(ctx context.Context, id int) (*Symptom, error) {
	return c.Query().Where(symptom.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SymptomClient) GetX(ctx context.Context, id int) *Symptom {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryRepairInformation queries the repair_information edge of a Symptom.
func (c *SymptomClient) QueryRepairInformation(s *Symptom) *RepairInvoiceQuery {
	query := &RepairInvoiceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(symptom.Table, symptom.FieldID, id),
			sqlgraph.To(repairinvoice.Table, repairinvoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, symptom.RepairInformationTable, symptom.RepairInformationColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SymptomClient) Hooks() []Hook {
	return c.hooks.Symptom
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryFaculty queries the faculty edge of a User.
func (c *UserClient) QueryFaculty(u *User) *FacultyQuery {
	query := &FacultyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(faculty.Table, faculty.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.FacultyTable, user.FacultyColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBranch queries the branch edge of a User.
func (c *UserClient) QueryBranch(u *User) *BranchQuery {
	query := &BranchQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(branch.Table, branch.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.BranchTable, user.BranchColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBuilding queries the building edge of a User.
func (c *UserClient) QueryBuilding(u *User) *BuildingQuery {
	query := &BuildingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(building.Table, building.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.BuildingTable, user.BuildingColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoom queries the room edge of a User.
func (c *UserClient) QueryRoom(u *User) *RoomQuery {
	query := &RoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.RoomTable, user.RoomColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRepairinvoiceInformations queries the repairinvoice_informations edge of a User.
func (c *UserClient) QueryRepairinvoiceInformations(u *User) *RepairInvoiceQuery {
	query := &RepairInvoiceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(repairinvoice.Table, repairinvoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.RepairinvoiceInformationsTable, user.RepairinvoiceInformationsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
