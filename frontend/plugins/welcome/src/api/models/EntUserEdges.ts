/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EntBranch,
    EntBranchFromJSON,
    EntBranchFromJSONTyped,
    EntBranchToJSON,
    EntBuilding,
    EntBuildingFromJSON,
    EntBuildingFromJSONTyped,
    EntBuildingToJSON,
    EntFaculty,
    EntFacultyFromJSON,
    EntFacultyFromJSONTyped,
    EntFacultyToJSON,
    EntRepairInvoice,
    EntRepairInvoiceFromJSON,
    EntRepairInvoiceFromJSONTyped,
    EntRepairInvoiceToJSON,
    EntRoom,
    EntRoomFromJSON,
    EntRoomFromJSONTyped,
    EntRoomToJSON,
} from './';

/**
 * 
 * @export
 * @interface EntUserEdges
 */
export interface EntUserEdges {
    /**
     * 
     * @type {EntBranch}
     * @memberof EntUserEdges
     */
    branch?: EntBranch;
    /**
     * 
     * @type {EntBuilding}
     * @memberof EntUserEdges
     */
    building?: EntBuilding;
    /**
     * 
     * @type {EntFaculty}
     * @memberof EntUserEdges
     */
    faculty?: EntFaculty;
    /**
     * RepairinvoiceInformations holds the value of the repairinvoice_informations edge.
     * @type {Array<EntRepairInvoice>}
     * @memberof EntUserEdges
     */
    repairinvoiceInformations?: Array<EntRepairInvoice>;
    /**
     * 
     * @type {EntRoom}
     * @memberof EntUserEdges
     */
    room?: EntRoom;
}

export function EntUserEdgesFromJSON(json: any): EntUserEdges {
    return EntUserEdgesFromJSONTyped(json, false);
}

export function EntUserEdgesFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntUserEdges {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'branch': !exists(json, 'Branch') ? undefined : EntBranchFromJSON(json['Branch']),
        'building': !exists(json, 'Building') ? undefined : EntBuildingFromJSON(json['Building']),
        'faculty': !exists(json, 'Faculty') ? undefined : EntFacultyFromJSON(json['Faculty']),
        'repairinvoiceInformations': !exists(json, 'RepairinvoiceInformations') ? undefined : ((json['RepairinvoiceInformations'] as Array<any>).map(EntRepairInvoiceFromJSON)),
        'room': !exists(json, 'Room') ? undefined : EntRoomFromJSON(json['Room']),
    };
}

export function EntUserEdgesToJSON(value?: EntUserEdges | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'branch': EntBranchToJSON(value.branch),
        'building': EntBuildingToJSON(value.building),
        'faculty': EntFacultyToJSON(value.faculty),
        'repairinvoiceInformations': value.repairinvoiceInformations === undefined ? undefined : ((value.repairinvoiceInformations as Array<any>).map(EntRepairInvoiceToJSON)),
        'room': EntRoomToJSON(value.room),
    };
}


