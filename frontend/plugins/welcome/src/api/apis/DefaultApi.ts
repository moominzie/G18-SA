/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersBill,
    ControllersBillFromJSON,
    ControllersBillToJSON,
    ControllersRepairInvoice,
    ControllersRepairInvoiceFromJSON,
    ControllersRepairInvoiceToJSON,
    ControllersReturninvoice,
    ControllersReturninvoiceFromJSON,
    ControllersReturninvoiceToJSON,
    ControllersUser,
    ControllersUserFromJSON,
    ControllersUserToJSON,
    EntBill,
    EntBillFromJSON,
    EntBillToJSON,
    EntBillingstatus,
    EntBillingstatusFromJSON,
    EntBillingstatusToJSON,
    EntBranch,
    EntBranchFromJSON,
    EntBranchToJSON,
    EntBuilding,
    EntBuildingFromJSON,
    EntBuildingToJSON,
    EntDevice,
    EntDeviceFromJSON,
    EntDeviceToJSON,
    EntEmployee,
    EntEmployeeFromJSON,
    EntEmployeeToJSON,
    EntFaculty,
    EntFacultyFromJSON,
    EntFacultyToJSON,
    EntRepairInvoice,
    EntRepairInvoiceFromJSON,
    EntRepairInvoiceToJSON,
    EntReturninvoice,
    EntReturninvoiceFromJSON,
    EntReturninvoiceToJSON,
    EntRoom,
    EntRoomFromJSON,
    EntRoomToJSON,
    EntStatusR,
    EntStatusRFromJSON,
    EntStatusRToJSON,
    EntStatust,
    EntStatustFromJSON,
    EntStatustToJSON,
    EntSymptom,
    EntSymptomFromJSON,
    EntSymptomToJSON,
    EntUser,
    EntUserFromJSON,
    EntUserToJSON,
} from '../models';

export interface CreateBillRequest {
    bill: ControllersBill;
}

export interface CreateBillingstatusRequest {
    billingstatus: EntBillingstatus;
}

export interface CreateBranchRequest {
    branch: EntBranch;
}

export interface CreateBuildingRequest {
    building: EntBuilding;
}

export interface CreateDeviceRequest {
    device: EntDevice;
}

export interface CreateEmployeeRequest {
    employee: EntEmployee;
}

export interface CreateFacultyRequest {
    faculty: EntFaculty;
}

export interface CreateRepairInvoiceRequest {
    repairInvoice: ControllersRepairInvoice;
}

export interface CreateReturninvoiceRequest {
    returninvoice: ControllersReturninvoice;
}

export interface CreateRoomRequest {
    room: EntRoom;
}

export interface CreateStatusrRequest {
    statusr: EntStatusR;
}

export interface CreateStatustRequest {
    statust: EntStatust;
}

export interface CreateSymptomRequest {
    symptom: EntSymptom;
}

export interface CreateUserRequest {
    user: ControllersUser;
}

export interface DeleteBranchRequest {
    id: number;
}

export interface DeleteBuildingRequest {
    id: number;
}

export interface DeleteDeviceRequest {
    id: number;
}

export interface DeleteEmployeeRequest {
    id: number;
}

export interface DeleteFacultyRequest {
    id: number;
}

export interface DeleteRepairInvoiceRequest {
    id: number;
}

export interface DeleteRoomRequest {
    id: number;
}

export interface DeleteStatusrRequest {
    id: number;
}

export interface DeleteStatustRequest {
    id: number;
}

export interface DeleteSymptomRequest {
    id: number;
}

export interface DeleteUserRequest {
    id: number;
}

export interface GetBillingstatusRequest {
    id: number;
}

export interface GetBranchRequest {
    id: number;
}

export interface GetBuildingRequest {
    id: number;
}

export interface GetDeviceRequest {
    id: number;
}

export interface GetEmployeeRequest {
    id: number;
}

export interface GetFacultyRequest {
    id: number;
}

export interface GetRoomRequest {
    id: number;
}

export interface GetStatusrRequest {
    id: number;
}

export interface GetStatustRequest {
    id: number;
}

export interface GetSymptomRequest {
    id: number;
}

export interface ListBillRequest {
    limit?: number;
    offset?: number;
}

export interface ListBillingstatusRequest {
    limit?: number;
    offset?: number;
}

export interface ListBranchRequest {
    limit?: number;
    offset?: number;
}

export interface ListBuildingRequest {
    limit?: number;
    offset?: number;
}

export interface ListDeviceRequest {
    limit?: number;
    offset?: number;
}

export interface ListEmployeeRequest {
    limit?: number;
    offset?: number;
}

export interface ListFacultyRequest {
    limit?: number;
    offset?: number;
}

export interface ListRepairInvoiceRequest {
    limit?: number;
    offset?: number;
}

export interface ListReturninvoiceRequest {
    limit?: number;
    offset?: number;
}

export interface ListRoomRequest {
    limit?: number;
    offset?: number;
}

export interface ListStatusrRequest {
    limit?: number;
    offset?: number;
}

export interface ListStatustRequest {
    limit?: number;
    offset?: number;
}

export interface ListSymptomRequest {
    limit?: number;
    offset?: number;
}

export interface ListUserRequest {
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create bill
     * Create bill
     */
    async createBillRaw(requestParameters: CreateBillRequest): Promise<runtime.ApiResponse<ControllersBill>> {
        if (requestParameters.bill === null || requestParameters.bill === undefined) {
            throw new runtime.RequiredError('bill','Required parameter requestParameters.bill was null or undefined when calling createBill.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bills`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersBillToJSON(requestParameters.bill),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersBillFromJSON(jsonValue));
    }

    /**
     * Create bill
     * Create bill
     */
    async createBill(requestParameters: CreateBillRequest): Promise<ControllersBill> {
        const response = await this.createBillRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create billingstatus
     * Create billingstatus
     */
    async createBillingstatusRaw(requestParameters: CreateBillingstatusRequest): Promise<runtime.ApiResponse<EntBillingstatus>> {
        if (requestParameters.billingstatus === null || requestParameters.billingstatus === undefined) {
            throw new runtime.RequiredError('billingstatus','Required parameter requestParameters.billingstatus was null or undefined when calling createBillingstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/billingstatuss`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntBillingstatusToJSON(requestParameters.billingstatus),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBillingstatusFromJSON(jsonValue));
    }

    /**
     * Create billingstatus
     * Create billingstatus
     */
    async createBillingstatus(requestParameters: CreateBillingstatusRequest): Promise<EntBillingstatus> {
        const response = await this.createBillingstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create branch
     * Create branch
     */
    async createBranchRaw(requestParameters: CreateBranchRequest): Promise<runtime.ApiResponse<EntBranch>> {
        if (requestParameters.branch === null || requestParameters.branch === undefined) {
            throw new runtime.RequiredError('branch','Required parameter requestParameters.branch was null or undefined when calling createBranch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/branchs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntBranchToJSON(requestParameters.branch),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBranchFromJSON(jsonValue));
    }

    /**
     * Create branch
     * Create branch
     */
    async createBranch(requestParameters: CreateBranchRequest): Promise<EntBranch> {
        const response = await this.createBranchRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create building
     * Create building
     */
    async createBuildingRaw(requestParameters: CreateBuildingRequest): Promise<runtime.ApiResponse<EntBuilding>> {
        if (requestParameters.building === null || requestParameters.building === undefined) {
            throw new runtime.RequiredError('building','Required parameter requestParameters.building was null or undefined when calling createBuilding.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/buildings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntBuildingToJSON(requestParameters.building),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBuildingFromJSON(jsonValue));
    }

    /**
     * Create building
     * Create building
     */
    async createBuilding(requestParameters: CreateBuildingRequest): Promise<EntBuilding> {
        const response = await this.createBuildingRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create device
     * Create device
     */
    async createDeviceRaw(requestParameters: CreateDeviceRequest): Promise<runtime.ApiResponse<EntDevice>> {
        if (requestParameters.device === null || requestParameters.device === undefined) {
            throw new runtime.RequiredError('device','Required parameter requestParameters.device was null or undefined when calling createDevice.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/devices`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDeviceToJSON(requestParameters.device),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDeviceFromJSON(jsonValue));
    }

    /**
     * Create device
     * Create device
     */
    async createDevice(requestParameters: CreateDeviceRequest): Promise<EntDevice> {
        const response = await this.createDeviceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create employee
     * Create employee
     */
    async createEmployeeRaw(requestParameters: CreateEmployeeRequest): Promise<runtime.ApiResponse<EntEmployee>> {
        if (requestParameters.employee === null || requestParameters.employee === undefined) {
            throw new runtime.RequiredError('employee','Required parameter requestParameters.employee was null or undefined when calling createEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/employees`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntEmployeeToJSON(requestParameters.employee),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEmployeeFromJSON(jsonValue));
    }

    /**
     * Create employee
     * Create employee
     */
    async createEmployee(requestParameters: CreateEmployeeRequest): Promise<EntEmployee> {
        const response = await this.createEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create faculty
     * Create faculty
     */
    async createFacultyRaw(requestParameters: CreateFacultyRequest): Promise<runtime.ApiResponse<EntFaculty>> {
        if (requestParameters.faculty === null || requestParameters.faculty === undefined) {
            throw new runtime.RequiredError('faculty','Required parameter requestParameters.faculty was null or undefined when calling createFaculty.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/facultys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntFacultyToJSON(requestParameters.faculty),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFacultyFromJSON(jsonValue));
    }

    /**
     * Create faculty
     * Create faculty
     */
    async createFaculty(requestParameters: CreateFacultyRequest): Promise<EntFaculty> {
        const response = await this.createFacultyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create repairInvoice
     * Create repairInvoice
     */
    async createRepairInvoiceRaw(requestParameters: CreateRepairInvoiceRequest): Promise<runtime.ApiResponse<ControllersRepairInvoice>> {
        if (requestParameters.repairInvoice === null || requestParameters.repairInvoice === undefined) {
            throw new runtime.RequiredError('repairInvoice','Required parameter requestParameters.repairInvoice was null or undefined when calling createRepairInvoice.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/repairinvoices`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersRepairInvoiceToJSON(requestParameters.repairInvoice),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersRepairInvoiceFromJSON(jsonValue));
    }

    /**
     * Create repairInvoice
     * Create repairInvoice
     */
    async createRepairInvoice(requestParameters: CreateRepairInvoiceRequest): Promise<ControllersRepairInvoice> {
        const response = await this.createRepairInvoiceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create returninvoice
     * Create returninvoice
     */
    async createReturninvoiceRaw(requestParameters: CreateReturninvoiceRequest): Promise<runtime.ApiResponse<ControllersReturninvoice>> {
        if (requestParameters.returninvoice === null || requestParameters.returninvoice === undefined) {
            throw new runtime.RequiredError('returninvoice','Required parameter requestParameters.returninvoice was null or undefined when calling createReturninvoice.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/returninvoices`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersReturninvoiceToJSON(requestParameters.returninvoice),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersReturninvoiceFromJSON(jsonValue));
    }

    /**
     * Create returninvoice
     * Create returninvoice
     */
    async createReturninvoice(requestParameters: CreateReturninvoiceRequest): Promise<ControllersReturninvoice> {
        const response = await this.createReturninvoiceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create room
     * Create room
     */
    async createRoomRaw(requestParameters: CreateRoomRequest): Promise<runtime.ApiResponse<EntRoom>> {
        if (requestParameters.room === null || requestParameters.room === undefined) {
            throw new runtime.RequiredError('room','Required parameter requestParameters.room was null or undefined when calling createRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomToJSON(requestParameters.room),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomFromJSON(jsonValue));
    }

    /**
     * Create room
     * Create room
     */
    async createRoom(requestParameters: CreateRoomRequest): Promise<EntRoom> {
        const response = await this.createRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create statusr
     * Create statusr
     */
    async createStatusrRaw(requestParameters: CreateStatusrRequest): Promise<runtime.ApiResponse<EntStatusR>> {
        if (requestParameters.statusr === null || requestParameters.statusr === undefined) {
            throw new runtime.RequiredError('statusr','Required parameter requestParameters.statusr was null or undefined when calling createStatusr.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/statusrs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntStatusRToJSON(requestParameters.statusr),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatusRFromJSON(jsonValue));
    }

    /**
     * Create statusr
     * Create statusr
     */
    async createStatusr(requestParameters: CreateStatusrRequest): Promise<EntStatusR> {
        const response = await this.createStatusrRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create statust
     * Create statust
     */
    async createStatustRaw(requestParameters: CreateStatustRequest): Promise<runtime.ApiResponse<EntStatust>> {
        if (requestParameters.statust === null || requestParameters.statust === undefined) {
            throw new runtime.RequiredError('statust','Required parameter requestParameters.statust was null or undefined when calling createStatust.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/statusts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntStatustToJSON(requestParameters.statust),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatustFromJSON(jsonValue));
    }

    /**
     * Create statust
     * Create statust
     */
    async createStatust(requestParameters: CreateStatustRequest): Promise<EntStatust> {
        const response = await this.createStatustRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create symptom
     * Create symptom
     */
    async createSymptomRaw(requestParameters: CreateSymptomRequest): Promise<runtime.ApiResponse<EntSymptom>> {
        if (requestParameters.symptom === null || requestParameters.symptom === undefined) {
            throw new runtime.RequiredError('symptom','Required parameter requestParameters.symptom was null or undefined when calling createSymptom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/symptoms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntSymptomToJSON(requestParameters.symptom),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSymptomFromJSON(jsonValue));
    }

    /**
     * Create symptom
     * Create symptom
     */
    async createSymptom(requestParameters: CreateSymptomRequest): Promise<EntSymptom> {
        const response = await this.createSymptomRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create user
     * Create user
     */
    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<ControllersUser>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling createUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersUserFromJSON(jsonValue));
    }

    /**
     * Create user
     * Create user
     */
    async createUser(requestParameters: CreateUserRequest): Promise<ControllersUser> {
        const response = await this.createUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get branch by ID
     * Delete a branch entity by ID
     */
    async deleteBranchRaw(requestParameters: DeleteBranchRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBranch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/branch/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get branch by ID
     * Delete a branch entity by ID
     */
    async deleteBranch(requestParameters: DeleteBranchRequest): Promise<object> {
        const response = await this.deleteBranchRaw(requestParameters);
        return await response.value();
    }

    /**
     * get building by ID
     * Delete a building entity by ID
     */
    async deleteBuildingRaw(requestParameters: DeleteBuildingRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBuilding.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/building/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get building by ID
     * Delete a building entity by ID
     */
    async deleteBuilding(requestParameters: DeleteBuildingRequest): Promise<object> {
        const response = await this.deleteBuildingRaw(requestParameters);
        return await response.value();
    }

    /**
     * get device by ID
     * Delete a device entity by ID
     */
    async deleteDeviceRaw(requestParameters: DeleteDeviceRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDevice.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/device/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get device by ID
     * Delete a device entity by ID
     */
    async deleteDevice(requestParameters: DeleteDeviceRequest): Promise<object> {
        const response = await this.deleteDeviceRaw(requestParameters);
        return await response.value();
    }

    /**
     * get employee by ID
     * Delete a employee entity by ID
     */
    async deleteEmployeeRaw(requestParameters: DeleteEmployeeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employee/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get employee by ID
     * Delete a employee entity by ID
     */
    async deleteEmployee(requestParameters: DeleteEmployeeRequest): Promise<object> {
        const response = await this.deleteEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get faculty by ID
     * Delete a faculty entity by ID
     */
    async deleteFacultyRaw(requestParameters: DeleteFacultyRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFaculty.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/faculty/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get faculty by ID
     * Delete a faculty entity by ID
     */
    async deleteFaculty(requestParameters: DeleteFacultyRequest): Promise<object> {
        const response = await this.deleteFacultyRaw(requestParameters);
        return await response.value();
    }

    /**
     * get repairInvoice by ID
     * Delete a repairInvoice entity by ID
     */
    async deleteRepairInvoiceRaw(requestParameters: DeleteRepairInvoiceRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRepairInvoice.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/repairinvoices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get repairInvoice by ID
     * Delete a repairInvoice entity by ID
     */
    async deleteRepairInvoice(requestParameters: DeleteRepairInvoiceRequest): Promise<object> {
        const response = await this.deleteRepairInvoiceRaw(requestParameters);
        return await response.value();
    }

    /**
     * get room by ID
     * Delete a room entity by ID
     */
    async deleteRoomRaw(requestParameters: DeleteRoomRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/room/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get room by ID
     * Delete a room entity by ID
     */
    async deleteRoom(requestParameters: DeleteRoomRequest): Promise<object> {
        const response = await this.deleteRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get statusr by ID
     * Delete a statusr entity by ID
     */
    async deleteStatusrRaw(requestParameters: DeleteStatusrRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStatusr.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statusr/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get statusr by ID
     * Delete a statusr entity by ID
     */
    async deleteStatusr(requestParameters: DeleteStatusrRequest): Promise<object> {
        const response = await this.deleteStatusrRaw(requestParameters);
        return await response.value();
    }

    /**
     * get statust by ID
     * Delete a statust entity by ID
     */
    async deleteStatustRaw(requestParameters: DeleteStatustRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStatust.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statust/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get statust by ID
     * Delete a statust entity by ID
     */
    async deleteStatust(requestParameters: DeleteStatustRequest): Promise<object> {
        const response = await this.deleteStatustRaw(requestParameters);
        return await response.value();
    }

    /**
     * get symptom by ID
     * Delete a symptom entity by ID
     */
    async deleteSymptomRaw(requestParameters: DeleteSymptomRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSymptom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/symptom/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get symptom by ID
     * Delete a symptom entity by ID
     */
    async deleteSymptom(requestParameters: DeleteSymptomRequest): Promise<object> {
        const response = await this.deleteSymptomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUser(requestParameters: DeleteUserRequest): Promise<object> {
        const response = await this.deleteUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get billingstatus by ID
     * Get a billingstatus entity by ID
     */
    async getBillingstatusRaw(requestParameters: GetBillingstatusRequest): Promise<runtime.ApiResponse<EntBillingstatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBillingstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/billingstatuss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBillingstatusFromJSON(jsonValue));
    }

    /**
     * get billingstatus by ID
     * Get a billingstatus entity by ID
     */
    async getBillingstatus(requestParameters: GetBillingstatusRequest): Promise<EntBillingstatus> {
        const response = await this.getBillingstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * get branch by ID
     * Get a branch entity by ID
     */
    async getBranchRaw(requestParameters: GetBranchRequest): Promise<runtime.ApiResponse<EntBranch>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBranch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/branchs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBranchFromJSON(jsonValue));
    }

    /**
     * get branch by ID
     * Get a branch entity by ID
     */
    async getBranch(requestParameters: GetBranchRequest): Promise<EntBranch> {
        const response = await this.getBranchRaw(requestParameters);
        return await response.value();
    }

    /**
     * get building by ID
     * Get a building entity by ID
     */
    async getBuildingRaw(requestParameters: GetBuildingRequest): Promise<runtime.ApiResponse<EntBuilding>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBuilding.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/buildings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBuildingFromJSON(jsonValue));
    }

    /**
     * get building by ID
     * Get a building entity by ID
     */
    async getBuilding(requestParameters: GetBuildingRequest): Promise<EntBuilding> {
        const response = await this.getBuildingRaw(requestParameters);
        return await response.value();
    }

    /**
     * get device by ID
     * Get a device entity by ID
     */
    async getDeviceRaw(requestParameters: GetDeviceRequest): Promise<runtime.ApiResponse<EntDevice>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDevice.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/devices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDeviceFromJSON(jsonValue));
    }

    /**
     * get device by ID
     * Get a device entity by ID
     */
    async getDevice(requestParameters: GetDeviceRequest): Promise<EntDevice> {
        const response = await this.getDeviceRaw(requestParameters);
        return await response.value();
    }

    /**
     * get employee by ID
     * Get a employee entity by ID
     */
    async getEmployeeRaw(requestParameters: GetEmployeeRequest): Promise<runtime.ApiResponse<EntEmployee>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEmployeeFromJSON(jsonValue));
    }

    /**
     * get employee by ID
     * Get a employee entity by ID
     */
    async getEmployee(requestParameters: GetEmployeeRequest): Promise<EntEmployee> {
        const response = await this.getEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get faculty by ID
     * Get a faculty entity by ID
     */
    async getFacultyRaw(requestParameters: GetFacultyRequest): Promise<runtime.ApiResponse<EntFaculty>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFaculty.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facultys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFacultyFromJSON(jsonValue));
    }

    /**
     * get faculty by ID
     * Get a faculty entity by ID
     */
    async getFaculty(requestParameters: GetFacultyRequest): Promise<EntFaculty> {
        const response = await this.getFacultyRaw(requestParameters);
        return await response.value();
    }

    /**
     * get room by ID
     * Get a room entity by ID
     */
    async getRoomRaw(requestParameters: GetRoomRequest): Promise<runtime.ApiResponse<EntRoom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomFromJSON(jsonValue));
    }

    /**
     * get room by ID
     * Get a room entity by ID
     */
    async getRoom(requestParameters: GetRoomRequest): Promise<EntRoom> {
        const response = await this.getRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get statusr by ID
     * Get a statusr entity by ID
     */
    async getStatusrRaw(requestParameters: GetStatusrRequest): Promise<runtime.ApiResponse<EntStatusR>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStatusr.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statusrs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatusRFromJSON(jsonValue));
    }

    /**
     * get statusr by ID
     * Get a statusr entity by ID
     */
    async getStatusr(requestParameters: GetStatusrRequest): Promise<EntStatusR> {
        const response = await this.getStatusrRaw(requestParameters);
        return await response.value();
    }

    /**
     * get statust by ID
     * Get a statust entity by ID
     */
    async getStatustRaw(requestParameters: GetStatustRequest): Promise<runtime.ApiResponse<EntStatust>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStatust.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statusts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatustFromJSON(jsonValue));
    }

    /**
     * get statust by ID
     * Get a statust entity by ID
     */
    async getStatust(requestParameters: GetStatustRequest): Promise<EntStatust> {
        const response = await this.getStatustRaw(requestParameters);
        return await response.value();
    }

    /**
     * get symptom by ID
     * Get a symptom entity by ID
     */
    async getSymptomRaw(requestParameters: GetSymptomRequest): Promise<runtime.ApiResponse<EntSymptom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSymptom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/symptoms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSymptomFromJSON(jsonValue));
    }

    /**
     * get symptom by ID
     * Get a symptom entity by ID
     */
    async getSymptom(requestParameters: GetSymptomRequest): Promise<EntSymptom> {
        const response = await this.getSymptomRaw(requestParameters);
        return await response.value();
    }

    /**
     * list bill entities
     * List bill entities
     */
    async listBillRaw(requestParameters: ListBillRequest): Promise<runtime.ApiResponse<Array<EntBill>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bills`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBillFromJSON));
    }

    /**
     * list bill entities
     * List bill entities
     */
    async listBill(requestParameters: ListBillRequest): Promise<Array<EntBill>> {
        const response = await this.listBillRaw(requestParameters);
        return await response.value();
    }

    /**
     * list billingstatus entities
     * List billingstatus entities
     */
    async listBillingstatusRaw(requestParameters: ListBillingstatusRequest): Promise<runtime.ApiResponse<Array<EntBillingstatus>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/billingstatuss`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBillingstatusFromJSON));
    }

    /**
     * list billingstatus entities
     * List billingstatus entities
     */
    async listBillingstatus(requestParameters: ListBillingstatusRequest): Promise<Array<EntBillingstatus>> {
        const response = await this.listBillingstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * list branch entities
     * List branch entities
     */
    async listBranchRaw(requestParameters: ListBranchRequest): Promise<runtime.ApiResponse<Array<EntBranch>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/branchs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBranchFromJSON));
    }

    /**
     * list branch entities
     * List branch entities
     */
    async listBranch(requestParameters: ListBranchRequest): Promise<Array<EntBranch>> {
        const response = await this.listBranchRaw(requestParameters);
        return await response.value();
    }

    /**
     * list building entities
     * List building entities
     */
    async listBuildingRaw(requestParameters: ListBuildingRequest): Promise<runtime.ApiResponse<Array<EntBuilding>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/buildings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBuildingFromJSON));
    }

    /**
     * list building entities
     * List building entities
     */
    async listBuilding(requestParameters: ListBuildingRequest): Promise<Array<EntBuilding>> {
        const response = await this.listBuildingRaw(requestParameters);
        return await response.value();
    }

    /**
     * list device entities
     * List device entities
     */
    async listDeviceRaw(requestParameters: ListDeviceRequest): Promise<runtime.ApiResponse<Array<EntDevice>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/devices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDeviceFromJSON));
    }

    /**
     * list device entities
     * List device entities
     */
    async listDevice(requestParameters: ListDeviceRequest): Promise<Array<EntDevice>> {
        const response = await this.listDeviceRaw(requestParameters);
        return await response.value();
    }

    /**
     * list employee entities
     * List employee entities
     */
    async listEmployeeRaw(requestParameters: ListEmployeeRequest): Promise<runtime.ApiResponse<Array<EntEmployee>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employees`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntEmployeeFromJSON));
    }

    /**
     * list employee entities
     * List employee entities
     */
    async listEmployee(requestParameters: ListEmployeeRequest): Promise<Array<EntEmployee>> {
        const response = await this.listEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list faculty entities
     * List faculty entities
     */
    async listFacultyRaw(requestParameters: ListFacultyRequest): Promise<runtime.ApiResponse<Array<EntFaculty>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facultys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntFacultyFromJSON));
    }

    /**
     * list faculty entities
     * List faculty entities
     */
    async listFaculty(requestParameters: ListFacultyRequest): Promise<Array<EntFaculty>> {
        const response = await this.listFacultyRaw(requestParameters);
        return await response.value();
    }

    /**
     * list repairInvoice entities
     * List repairInvoice entities
     */
    async listRepairInvoiceRaw(requestParameters: ListRepairInvoiceRequest): Promise<runtime.ApiResponse<Array<EntRepairInvoice>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/repairinvoices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRepairInvoiceFromJSON));
    }

    /**
     * list repairInvoice entities
     * List repairInvoice entities
     */
    async listRepairInvoice(requestParameters: ListRepairInvoiceRequest): Promise<Array<EntRepairInvoice>> {
        const response = await this.listRepairInvoiceRaw(requestParameters);
        return await response.value();
    }

    /**
     * list returninvoice entities
     * List returninvoice entities
     */
    async listReturninvoiceRaw(requestParameters: ListReturninvoiceRequest): Promise<runtime.ApiResponse<Array<EntReturninvoice>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/returninvoices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntReturninvoiceFromJSON));
    }

    /**
     * list returninvoice entities
     * List returninvoice entities
     */
    async listReturninvoice(requestParameters: ListReturninvoiceRequest): Promise<Array<EntReturninvoice>> {
        const response = await this.listReturninvoiceRaw(requestParameters);
        return await response.value();
    }

    /**
     * list room entities
     * List room entities
     */
    async listRoomRaw(requestParameters: ListRoomRequest): Promise<runtime.ApiResponse<Array<EntRoom>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoomFromJSON));
    }

    /**
     * list room entities
     * List room entities
     */
    async listRoom(requestParameters: ListRoomRequest): Promise<Array<EntRoom>> {
        const response = await this.listRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * list statusr entities
     * List statusr entities
     */
    async listStatusrRaw(requestParameters: ListStatusrRequest): Promise<runtime.ApiResponse<Array<EntStatusR>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statusrs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntStatusRFromJSON));
    }

    /**
     * list statusr entities
     * List statusr entities
     */
    async listStatusr(requestParameters: ListStatusrRequest): Promise<Array<EntStatusR>> {
        const response = await this.listStatusrRaw(requestParameters);
        return await response.value();
    }

    /**
     * list statust entities
     * List statust entities
     */
    async listStatustRaw(requestParameters: ListStatustRequest): Promise<runtime.ApiResponse<Array<EntStatust>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statusts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntStatustFromJSON));
    }

    /**
     * list statust entities
     * List statust entities
     */
    async listStatust(requestParameters: ListStatustRequest): Promise<Array<EntStatust>> {
        const response = await this.listStatustRaw(requestParameters);
        return await response.value();
    }

    /**
     * list symptom entities
     * List symptom entities
     */
    async listSymptomRaw(requestParameters: ListSymptomRequest): Promise<runtime.ApiResponse<Array<EntSymptom>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/symptoms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntSymptomFromJSON));
    }

    /**
     * list symptom entities
     * List symptom entities
     */
    async listSymptom(requestParameters: ListSymptomRequest): Promise<Array<EntSymptom>> {
        const response = await this.listSymptomRaw(requestParameters);
        return await response.value();
    }

    /**
     * list user entities
     * List user entities
     */
    async listUserRaw(requestParameters: ListUserRequest): Promise<runtime.ApiResponse<Array<EntUser>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserFromJSON));
    }

    /**
     * list user entities
     * List user entities
     */
    async listUser(requestParameters: ListUserRequest): Promise<Array<EntUser>> {
        const response = await this.listUserRaw(requestParameters);
        return await response.value();
    }

}
