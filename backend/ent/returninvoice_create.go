// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/moominzie/user-record/ent/employee"
	"github.com/moominzie/user-record/ent/repairinvoice"
	"github.com/moominzie/user-record/ent/returninvoice"
	"github.com/moominzie/user-record/ent/statust"
)

// ReturninvoiceCreate is the builder for creating a Returninvoice entity.
type ReturninvoiceCreate struct {
	config
	mutation *ReturninvoiceMutation
	hooks    []Hook
}

// SetAddedtime sets the addedtime field.
func (rc *ReturninvoiceCreate) SetAddedtime(t time.Time) *ReturninvoiceCreate {
	rc.mutation.SetAddedtime(t)
	return rc
}

// SetRepairinvoiceID sets the Repairinvoice edge to RepairInvoice by id.
func (rc *ReturninvoiceCreate) SetRepairinvoiceID(id int) *ReturninvoiceCreate {
	rc.mutation.SetRepairinvoiceID(id)
	return rc
}

// SetRepairinvoice sets the Repairinvoice edge to RepairInvoice.
func (rc *ReturninvoiceCreate) SetRepairinvoice(r *RepairInvoice) *ReturninvoiceCreate {
	return rc.SetRepairinvoiceID(r.ID)
}

// SetEmployeeID sets the Employee edge to Employee by id.
func (rc *ReturninvoiceCreate) SetEmployeeID(id int) *ReturninvoiceCreate {
	rc.mutation.SetEmployeeID(id)
	return rc
}

// SetNillableEmployeeID sets the Employee edge to Employee by id if the given value is not nil.
func (rc *ReturninvoiceCreate) SetNillableEmployeeID(id *int) *ReturninvoiceCreate {
	if id != nil {
		rc = rc.SetEmployeeID(*id)
	}
	return rc
}

// SetEmployee sets the Employee edge to Employee.
func (rc *ReturninvoiceCreate) SetEmployee(e *Employee) *ReturninvoiceCreate {
	return rc.SetEmployeeID(e.ID)
}

// SetStatustID sets the Statust edge to Statust by id.
func (rc *ReturninvoiceCreate) SetStatustID(id int) *ReturninvoiceCreate {
	rc.mutation.SetStatustID(id)
	return rc
}

// SetNillableStatustID sets the Statust edge to Statust by id if the given value is not nil.
func (rc *ReturninvoiceCreate) SetNillableStatustID(id *int) *ReturninvoiceCreate {
	if id != nil {
		rc = rc.SetStatustID(*id)
	}
	return rc
}

// SetStatust sets the Statust edge to Statust.
func (rc *ReturninvoiceCreate) SetStatust(s *Statust) *ReturninvoiceCreate {
	return rc.SetStatustID(s.ID)
}

// Mutation returns the ReturninvoiceMutation object of the builder.
func (rc *ReturninvoiceCreate) Mutation() *ReturninvoiceMutation {
	return rc.mutation
}

// Save creates the Returninvoice in the database.
func (rc *ReturninvoiceCreate) Save(ctx context.Context) (*Returninvoice, error) {
	if _, ok := rc.mutation.Addedtime(); !ok {
		return nil, &ValidationError{Name: "addedtime", err: errors.New("ent: missing required field \"addedtime\"")}
	}
	if _, ok := rc.mutation.RepairinvoiceID(); !ok {
		return nil, &ValidationError{Name: "Repairinvoice", err: errors.New("ent: missing required edge \"Repairinvoice\"")}
	}
	var (
		err  error
		node *Returninvoice
	)
	if len(rc.hooks) == 0 {
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReturninvoiceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rc.mutation = mutation
			node, err = rc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReturninvoiceCreate) SaveX(ctx context.Context) *Returninvoice {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rc *ReturninvoiceCreate) sqlSave(ctx context.Context) (*Returninvoice, error) {
	r, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	r.ID = int(id)
	return r, nil
}

func (rc *ReturninvoiceCreate) createSpec() (*Returninvoice, *sqlgraph.CreateSpec) {
	var (
		r     = &Returninvoice{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: returninvoice.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: returninvoice.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.Addedtime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: returninvoice.FieldAddedtime,
		})
		r.Addedtime = value
	}
	if nodes := rc.mutation.RepairinvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   returninvoice.RepairinvoiceTable,
			Columns: []string{returninvoice.RepairinvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repairinvoice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returninvoice.EmployeeTable,
			Columns: []string{returninvoice.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.StatustIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returninvoice.StatustTable,
			Columns: []string{returninvoice.StatustColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statust.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return r, _spec
}
