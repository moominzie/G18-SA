// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/moominzie/user-record/ent/part"
	"github.com/moominzie/user-record/ent/partorder"
)

// PartCreate is the builder for creating a Part entity.
type PartCreate struct {
	config
	mutation *PartMutation
	hooks    []Hook
}

// SetPname sets the Pname field.
func (pc *PartCreate) SetPname(s string) *PartCreate {
	pc.mutation.SetPname(s)
	return pc
}

// AddPartInformationIDs adds the part_informations edge to Partorder by ids.
func (pc *PartCreate) AddPartInformationIDs(ids ...int) *PartCreate {
	pc.mutation.AddPartInformationIDs(ids...)
	return pc
}

// AddPartInformations adds the part_informations edges to Partorder.
func (pc *PartCreate) AddPartInformations(p ...*Partorder) *PartCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPartInformationIDs(ids...)
}

// Mutation returns the PartMutation object of the builder.
func (pc *PartCreate) Mutation() *PartMutation {
	return pc.mutation
}

// Save creates the Part in the database.
func (pc *PartCreate) Save(ctx context.Context) (*Part, error) {
	if _, ok := pc.mutation.Pname(); !ok {
		return nil, &ValidationError{Name: "Pname", err: errors.New("ent: missing required field \"Pname\"")}
	}
	var (
		err  error
		node *Part
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PartCreate) SaveX(ctx context.Context) *Part {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PartCreate) sqlSave(ctx context.Context) (*Part, error) {
	pa, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pa.ID = int(id)
	return pa, nil
}

func (pc *PartCreate) createSpec() (*Part, *sqlgraph.CreateSpec) {
	var (
		pa    = &Part{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: part.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: part.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.Pname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: part.FieldPname,
		})
		pa.Pname = value
	}
	if nodes := pc.mutation.PartInformationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   part.PartInformationsTable,
			Columns: []string{part.PartInformationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partorder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pa, _spec
}
